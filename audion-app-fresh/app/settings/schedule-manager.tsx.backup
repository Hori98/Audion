/**
 * Schedule Manager Screen
 * SchedulePick_�n섡;b
 */

import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Alert,
  Switch,
  TextInput,
  Modal,
} from 'react-native';
import { Stack, useRouter } from 'expo-router';
import FontAwesome from '@expo/vector-icons/FontAwesome';
import { useSchedulePickSettings, ScheduleProfile } from '../../context/SettingsContext';

interface ScheduleItemProps {
  profile: ScheduleProfile;
  onToggle: (enabled: boolean) => void;
  onEdit: () => void;
  onDelete: () => void;
}

function ScheduleItem({ profile, onToggle, onEdit, onDelete }: ScheduleItemProps) {
  const getFrequencyText = () => {
    switch (profile.frequency) {
      case 'daily':
        return '毎日';
      case 'weekly':
        return `週${profile.days?.length || 0}回`;
      case 'custom':
        return 'カスタム';
      default:
        return '';
    }
  };

  const getDaysText = () => {
    if (profile.frequency === 'daily') return '��';
    if (!profile.days || profile.days.length === 0) return '-�jW';

    const dayNames = ['�', '', 'k', '4', '(', '�', ''];
    return profile.days.map(day => dayNames[day]).join('�');
  };

  return (
    <View style={styles.scheduleItem}>
      <View style={styles.scheduleHeader}>
        <View style={styles.scheduleInfo}>
          <Text style={styles.scheduleName}>{profile.name}</Text>
          <Text style={styles.scheduleTime}>{profile.time}</Text>
          <Text style={styles.scheduleFrequency}>
            {getFrequencyText()} - {getDaysText()}
          </Text>
          <Text style={styles.scheduleDetails}>
            �p: {profile.maxArticles} | ����: {profile.genres.length}
          </Text>
        </View>
        <Switch
          value={profile.enabled}
          onValueChange={onToggle}
          trackColor={{ false: '#E0E0E0', true: '#007AFF' }}
          thumbColor={'#FFFFFF'}
        />
      </View>

      <View style={styles.scheduleActions}>
        <TouchableOpacity style={styles.actionButton} onPress={onEdit}>
          <FontAwesome name="edit" size={16} color="#007AFF" />
          <Text style={styles.actionText}>��</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.actionButton} onPress={onDelete}>
          <FontAwesome name="trash" size={16} color="#FF3B30" />
          <Text style={[styles.actionText, { color: '#FF3B30' }]}>Jd</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

interface ScheduleEditorModalProps {
  visible: boolean;
  onClose: () => void;
  onSave: (profile: Omit<ScheduleProfile, 'id'>) => void;
  editingProfile?: ScheduleProfile;
}

function ScheduleEditorModal({ visible, onClose, onSave, editingProfile }: ScheduleEditorModalProps) {
  const [name, setName] = useState(editingProfile?.name || '');
  const [time, setTime] = useState(editingProfile?.time || '07:00');
  const [frequency, setFrequency] = useState<'daily' | 'weekly' | 'custom'>(
    editingProfile?.frequency || 'daily'
  );
  const [selectedDays, setSelectedDays] = useState<number[]>(editingProfile?.days || []);
  const [maxArticles, setMaxArticles] = useState(editingProfile?.maxArticles?.toString() || '5');

  const dayNames = ['�', '', 'k', '4', '(', '�', ''];

  const handleSave = () => {
    if (!name.trim()) {
      Alert.alert('���', '�������e�WfO`UD');
      return;
    }

    if (!time.match(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/)) {
      Alert.alert('���', 'cWDB;b(HH:MM)ge�WfO`UD');
      return;
    }

    if (frequency !== 'daily' && selectedDays.length === 0) {
      Alert.alert('���', '�LY���x�WfO`UD');
      return;
    }

    const articleCount = parseInt(maxArticles);
    if (isNaN(articleCount) || articleCount < 1 || articleCount > 20) {
      Alert.alert('���', '�po1-20n��ge�WfO`UD');
      return;
    }

    onSave({
      name: name.trim(),
      time,
      frequency,
      days: frequency === 'daily' ? [0, 1, 2, 3, 4, 5, 6] : selectedDays,
      maxArticles: articleCount,
      enabled: true,
      genres: [], // �թ��oh����
      sources: [], // �թ��oh���
    });

    // ���
    setName('');
    setTime('07:00');
    setFrequency('daily');
    setSelectedDays([]);
    setMaxArticles('5');
    onClose();
  };

  const toggleDay = (dayIndex: number) => {
    setSelectedDays(prev =>
      prev.includes(dayIndex)
        ? prev.filter(d => d !== dayIndex)
        : [...prev, dayIndex].sort()
    );
  };

  return (
    <Modal visible={visible} animationType="slide" presentationStyle="pageSheet">
      <SafeAreaView style={styles.modalContainer}>
        <View style={styles.modalHeader}>
          <TouchableOpacity onPress={onClose}>
            <Text style={styles.cancelButton}>����</Text>
          </TouchableOpacity>
          <Text style={styles.modalTitle}>
            {editingProfile ? '��������' : '������\'}
          </Text>
          <TouchableOpacity onPress={handleSave}>
            <Text style={styles.saveButton}>�X</Text>
          </TouchableOpacity>
        </View>

        <ScrollView style={styles.modalContent}>
          <View style={styles.formSection}>
            <Text style={styles.formLabel}>������</Text>
            <TextInput
              style={styles.textInput}
              value={name}
              onChangeText={setName}
              placeholder="�: n����"
              placeholderTextColor="#888888"
            />
          </View>

          <View style={styles.formSection}>
            <Text style={styles.formLabel}>B;</Text>
            <TextInput
              style={styles.textInput}
              value={time}
              onChangeText={setTime}
              placeholder="07:00"
              placeholderTextColor="#888888"
            />
          </View>

          <View style={styles.formSection}>
            <Text style={styles.formLabel}>;�</Text>
            <View style={styles.frequencyOptions}>
              {(['daily', 'weekly', 'custom'] as const).map(freq => (
                <TouchableOpacity
                  key={freq}
                  style={[
                    styles.frequencyOption,
                    frequency === freq && styles.selectedFrequencyOption
                  ]}
                  onPress={() => setFrequency(freq)}
                >
                  <Text style={[
                    styles.frequencyText,
                    frequency === freq && styles.selectedFrequencyText
                  ]}>
                    {freq === 'daily' ? '��' : freq === 'weekly' ? '1XM' : '����'}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          {frequency !== 'daily' && (
            <View style={styles.formSection}>
              <Text style={styles.formLabel}>�L��</Text>
              <View style={styles.daysContainer}>
                {dayNames.map((day, index) => (
                  <TouchableOpacity
                    key={index}
                    style={[
                      styles.dayOption,
                      selectedDays.includes(index) && styles.selectedDayOption
                    ]}
                    onPress={() => toggleDay(index)}
                  >
                    <Text style={[
                      styles.dayText,
                      selectedDays.includes(index) && styles.selectedDayText
                    ]}>
                      {day}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          )}

          <View style={styles.formSection}>
            <Text style={styles.formLabel}>�p</Text>
            <TextInput
              style={styles.textInput}
              value={maxArticles}
              onChangeText={setMaxArticles}
              placeholder="5"
              placeholderTextColor="#888888"
              keyboardType="numeric"
            />
            <Text style={styles.formHint}>1-20n��g-�WfO`UD</Text>
          </View>
        </ScrollView>
      </SafeAreaView>
    </Modal>
  );
}

export default function ScheduleManagerScreen() {
  const router = useRouter();
  const {
    schedule,
    addScheduleProfile,
    updateScheduleProfile,
    deleteScheduleProfile,
    canAddMoreSchedules,
    updateScheduleSettings,
  } = useSchedulePickSettings();

  const [showEditor, setShowEditor] = useState(false);
  const [editingProfile, setEditingProfile] = useState<ScheduleProfile | undefined>();

  const handleToggleSchedule = (enabled: boolean) => {
    updateScheduleSettings({ enabled });
  };

  const handleAddSchedule = () => {
    if (!canAddMoreSchedules()) {
      Alert.alert(
        '6PkTW~W_',
        `������go '${schedule.freemium?.maxWeeklySchedules || 10}n������\gM~Y`
      );
      return;
    }
    setEditingProfile(undefined);
    setShowEditor(true);
  };

  const handleEditSchedule = (profile: ScheduleProfile) => {
    setEditingProfile(profile);
    setShowEditor(true);
  };

  const handleDeleteSchedule = (profile: ScheduleProfile) => {
    Alert.alert(
      '������Jd',
      `${profile.name}�JdW~YK`,
      [
        { text: '����', style: 'cancel' },
        {
          text: 'Jd',
          style: 'destructive',
          onPress: () => deleteScheduleProfile(profile.id),
        },
      ]
    );
  };

  const handleSaveSchedule = (profileData: Omit<ScheduleProfile, 'id'>) => {
    if (editingProfile) {
      updateScheduleProfile(editingProfile.id, profileData);
    } else {
      addScheduleProfile(profileData);
    }
  };

  const handleToggleProfile = (profile: ScheduleProfile, enabled: boolean) => {
    updateScheduleProfile(profile.id, { enabled });
  };

  const activeSchedules = schedule.profiles?.filter(p => p.enabled) || [];
  const totalSchedules = schedule.profiles?.length || 0;

  return (
    <SafeAreaView style={styles.container}>
      <Stack.Screen
        options={{
          title: 'SchedulePick-�',
          headerShown: true,
        }}
      />

      <ScrollView style={styles.scrollView}>
        {/* ��-� */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>SchedulePick_�</Text>
            <Switch
              value={schedule.enabled}
              onValueChange={handleToggleSchedule}
              trackColor={{ false: '#E0E0E0', true: '#007AFF' }}
              thumbColor={'#FFFFFF'}
            />
          </View>
          <Text style={styles.sectionDescription}>
            �W_B�k��g��W~Y�({activeSchedules.length}n������L	�gY
          </Text>
        </View>

        {/* ������ � */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>������ �</Text>
            <TouchableOpacity
              style={[
                styles.addButton,
                !schedule.enabled && styles.disabledButton
              ]}
              onPress={handleAddSchedule}
              disabled={!schedule.enabled}
            >
              <FontAwesome
                name="plus"
                size={16}
                color={schedule.enabled ? "#007AFF" : "#999999"}
              />
              <Text style={[
                styles.addButtonText,
                !schedule.enabled && styles.disabledText
              ]}>
                ��
              </Text>
            </TouchableOpacity>
          </View>

          {totalSchedules === 0 ? (
            <View style={styles.emptyState}>
              <FontAwesome name="clock-o" size={48} color="#CCCCCC" />
              <Text style={styles.emptyTitle}>������LB�~[�</Text>
              <Text style={styles.emptyDescription}>
                ��ܿ�K��WD������\WfO`UD
              </Text>
            </View>
          ) : (
            <View style={styles.scheduleList}>
              {schedule.profiles?.map(profile => (
                <ScheduleItem
                  key={profile.id}
                  profile={profile}
                  onToggle={(enabled) => handleToggleProfile(profile, enabled)}
                  onEdit={() => handleEditSchedule(profile)}
                  onDelete={() => handleDeleteSchedule(profile)}
                />
              ))}
            </View>
          )}
        </View>

        {/* 6P�1 */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>���6P</Text>
          <Text style={styles.limitText}>
            ������: {totalSchedules}/{schedule.freemium?.maxWeeklySchedules || 10}~g
          </Text>
          <Text style={styles.limitDescription}>
            ��On������LŁj4o��ߢ����k��װ���WfO`UD
          </Text>
        </View>
      </ScrollView>

      {/* ������������ */}
      <ScheduleEditorModal
        visible={showEditor}
        onClose={() => setShowEditor(false)}
        onSave={handleSaveSchedule}
        editingProfile={editingProfile}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  scrollView: {
    flex: 1,
  },
  section: {
    backgroundColor: '#FFFFFF',
    marginHorizontal: 16,
    marginVertical: 8,
    borderRadius: 12,
    padding: 16,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333333',
  },
  sectionDescription: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
  },
  addButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 8,
    backgroundColor: '#F0F9FF',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#007AFF',
  },
  addButtonText: {
    marginLeft: 4,
    fontSize: 14,
    fontWeight: '600',
    color: '#007AFF',
  },
  disabledButton: {
    backgroundColor: '#F5F5F5',
    borderColor: '#E0E0E0',
  },
  disabledText: {
    color: '#999999',
  },
  emptyState: {
    alignItems: 'center',
    paddingVertical: 32,
  },
  emptyTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333',
    marginTop: 16,
  },
  emptyDescription: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    marginTop: 8,
  },
  scheduleList: {
    marginTop: 8,
  },
  scheduleItem: {
    backgroundColor: '#F8F9FA',
    borderRadius: 8,
    padding: 12,
    marginBottom: 8,
  },
  scheduleHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
  },
  scheduleInfo: {
    flex: 1,
    marginRight: 12,
  },
  scheduleName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 4,
  },
  scheduleTime: {
    fontSize: 18,
    fontWeight: '700',
    color: '#007AFF',
    marginBottom: 4,
  },
  scheduleFrequency: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 2,
  },
  scheduleDetails: {
    fontSize: 12,
    color: '#888888',
  },
  scheduleActions: {
    flexDirection: 'row',
    marginTop: 12,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#E0E0E0',
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 20,
  },
  actionText: {
    marginLeft: 4,
    fontSize: 14,
    color: '#007AFF',
  },
  limitText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 4,
  },
  limitDescription: {
    fontSize: 13,
    color: '#666666',
    lineHeight: 18,
  },
  // ���빿��
  modalContainer: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333333',
  },
  cancelButton: {
    fontSize: 16,
    color: '#FF3B30',
  },
  saveButton: {
    fontSize: 16,
    fontWeight: '600',
    color: '#007AFF',
  },
  modalContent: {
    flex: 1,
    padding: 16,
  },
  formSection: {
    marginBottom: 24,
  },
  formLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 8,
  },
  textInput: {
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#E0E0E0',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    fontSize: 16,
    color: '#333333',
  },
  formHint: {
    fontSize: 12,
    color: '#888888',
    marginTop: 4,
  },
  frequencyOptions: {
    flexDirection: 'row',
    gap: 8,
  },
  frequencyOption: {
    flex: 1,
    paddingVertical: 12,
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#E0E0E0',
    borderRadius: 8,
    alignItems: 'center',
  },
  selectedFrequencyOption: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  frequencyText: {
    fontSize: 14,
    color: '#333333',
  },
  selectedFrequencyText: {
    color: '#FFFFFF',
    fontWeight: '600',
  },
  daysContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  dayOption: {
    width: 40,
    height: 40,
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#E0E0E0',
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  selectedDayOption: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  dayText: {
    fontSize: 14,
    color: '#333333',
  },
  selectedDayText: {
    color: '#FFFFFF',
    fontWeight: '600',
  },
});